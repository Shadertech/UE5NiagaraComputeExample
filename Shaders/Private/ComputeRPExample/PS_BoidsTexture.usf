// Copyright (c) 2025 Aaron Trotter (ShaderTech). All Rights Reserved.

#include "/Engine/Public/Platform.ush"

Texture2D<float4> ComputeShaderOutput;
//float4 StartColor;
//float4 EndColor;
float2 TextureSize;
//float BlendFactor;

void MainPixelShader(in float2 uv : TEXCOORD0, out float4 OutColor : SV_Target0)
{
    //Does not work on metal
    //ComputeShaderOutput.GetDimensions(sizeX, sizeY);
    
    OutColor = ComputeShaderOutput.Load(int3(TextureSize.x * uv.x, TextureSize.y * uv.y, 0));
    
	//// First we need to unpack the uint material and retrieve the underlying R8G8B8A8_UINT values.
     //uint packedValue = ComputeShaderOutput.Load(int3(TextureSize.x * uv.x, TextureSize.y * uv.y, 0));
     //uint r = (packedValue & 0x000000FF);
     //uint g = (packedValue & 0x0000FF00) >> 8;
     //uint b = (packedValue & 0x00FF0000) >> 16;
     //uint a = (packedValue & 0xFF000000) >> 24;
	
	// Here we will just blend using the TextureParameterBlendFactor between our simple color change shader and the input from the compute shader
    //float alpha = length(uv) / length(float2(1, 1));
    //float4 solidColorComponent = lerp(StartColor, EndColor, alpha) * (1.0 - BlendFactor);
    //float4 computeShaderComponent = float4(r, g, b, a) / 255.0;// * BlendFactor;
    //OutColor = /*solidColorComponent +*/ computeShaderComponent;
}